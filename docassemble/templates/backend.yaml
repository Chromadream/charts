apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-docassemble-backend
  labels:
    app: {{ .Release.Name }}-docassemble-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-docassemble-backend
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-docassemble-backend
    spec:
{{- if or .Values.inClusterMinio .Values.inClusterPostgres .Values.inClusterRedis (and .Values.adminEmail .Values.adminPassword) }}
      initContainers:
  {{- if .Values.inClusterMinio }}
      - name: init-minio
        image: {{ .Values.minio.mcImage.repository }}:{{ .Values.minio.mcImage.tag }}
        command: ['sh', '-c', 'until { mc config host add minio "$S3_ENDPOINT_URL" "$S3_ACCESS_KEY" "$S3_SECRET_KEY" && mc ls minio/$S3_BUCKET/; } do echo waiting for minio; sleep 10; done;']
        env:
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-minio
              key: accesskey
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-minio
              key: secretkey
        - name: S3_ENDPOINT_URL
          value: "http://{{ .Release.Name }}-minio:9000"
        - name: S3_BUCKET
          value: "{{ .Values.minio.defaultBucket.name }}"
  {{- end }}
  {{- if and .Values.adminEmail .Values.adminPassword }}
      - name: init-credentials
        image: bash:4.4
        command: ['bash', '-c', 'echo -e "export DA_ADMIN_EMAIL={{ .Values.adminEmail }}\nexport DA_ADMIN_PASSWORD={{ .Values.adminPassword }}" > /configdata/initial_credentials']
        volumeMounts:
        - name: config-data
          mountPath: /configdata
  {{- end }}
  {{- if .Values.inClusterPostgres }}
      - name: init-postgres
        image: {{ .Values.postgresImage }}
        command: ['sh', '-c', 'until pg_isready -h {{ .Release.Name }}-postgres-service -p 5432; do echo waiting for postgres; sleep 2; done;']
  {{- end }}
  {{- if .Values.inClusterRedis }}
      - name: init-redis
        image: {{ .Values.redisImage }}
        command: ['sh', '-c', 'until redis-cli -h {{ .Release.Name }}-redis-service ping; do echo waiting for redis; sleep 2; done;']
  {{- end }}
{{- end }}
      containers:
      - name: docassemble
        image: {{ .Values.daImage }}
        imagePullPolicy: Always
        volumeMounts:
        - name: config-data
          mountPath: /configdata
        env:
        - name: CONTAINERROLE
          value: "{{ if and (not .Values.inClusterRabbitMQ) (not .Values.amqpURL) }}rabbitmq:{{ end }}log:cron:mail"
        {{ include "docassemble.commonEnvironment" . }}
        ports:
        - containerPort: 8080
        - containerPort: 9001
        - containerPort: 514
        - containerPort: 25
{{- if and (not .Values.inClusterRabbitMQ) (not .Values.amqpURL) }}
        - containerPort: 4369
        - containerPort: 5671
        - containerPort: 5672
        - containerPort: 25672
{{- end }}
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - "-c"
              - "supervisorctl status cron | grep RUNNING"
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 660
        livenessProbe:
          httpGet:
            path: /listlog/health_check
            port: 8080
          initialDelaySeconds: 900
          periodSeconds: 60
      volumes:
      - name: config-data
        emptyDir: {}
      terminationGracePeriodSeconds: 120
